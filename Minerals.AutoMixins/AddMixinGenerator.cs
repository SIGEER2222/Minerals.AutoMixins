namespace Minerals.AutoMixins
{
    [Generator]
    public class AddMixinGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
               "Minerals.AutoMixins.GenerateMixinAttribute",
               static (x, _) => true, //TODO: Optimize this for value types that matters
               static (x, _) => x
            );

            var adds = context.SyntaxProvider.ForAttributeWithMetadataName
            (
               "Minerals.AutoMixins.AddMixinAttribute",
               static (x, _) => true, //TODO: Optimize this for value types that matters
               static (x, _) => x
            );

            var combined = adds.Combine(generates.Collect());
            context.RegisterSourceOutput(combined, static (ctx, element) =>
            {
                string fileName = $"{element.Left.GetTargetNodeName()}.g.cs";
                ctx.AddSource(fileName, BuildMixinPartialClassForTargetNode
                (
                    element.Left,
                    element.Right
                ));
            });
        }

        public static SourceText BuildMixinPartialClassForTargetNode
        (
            GeneratorAttributeSyntaxContext add,
            ImmutableArray<GeneratorAttributeSyntaxContext> generates
        )
        {
            CodeBuilder builder = new();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());

            builder.AddUsingsFrom(generates.Add(add).Select(x => x.TargetNode));
            builder.AddNamespaceDeclarationHeader(add.TargetNode);
            builder.AddAutoGeneratedAttributes(add.TargetNode.GetType());

            builder.AddTypeDeclarationHeader(add.TargetNode);
            builder.OpenBlock();
            GeneratePartialClassBody(builder, generates);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void GeneratePartialClassBody
        (
            CodeBuilder builder,
            ImmutableArray<GeneratorAttributeSyntaxContext> generates
        )
        {
            foreach (var syntax in generates.Select(x => (TypeDeclarationSyntax)x.TargetNode))
            {
                builder.WriteLine(@"// MixinType: ").Write(syntax.Identifier.ValueText);
                foreach (var member in syntax.Members)
                {
                    builder.WriteLine(member.ToString());
                }
            }
        }
    }
}