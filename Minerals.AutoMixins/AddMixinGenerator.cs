namespace Minerals.AutoMixins
{
    [Generator]
    public class AddMixinGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            // (
            //    "Minerals.AutoMixins.GenerateMixinAttribute",
            //    static (x, _) => true, //TODO: Optimize this for value types that matters
            //    static (x, _) => x
            // );

            // var adds = context.SyntaxProvider.ForAttributeWithMetadataName
            // (
            //    "Minerals.AutoMixins.AddMixinAttribute",
            //    static (x, _) => true, //TODO: Optimize this for value types that matters
            //    static (x, _) => x
            // );

            // var combined = adds.Combine(generates.Collect());
            // context.RegisterSourceOutput(combined, static (ctx, element) =>
            // {
            //     string fileName = $"{element.Left.GetTargetNodeName()}.g.cs";
            //     ctx.AddSource(fileName, BuildMixinPartialClassForTargetNode
            //     (
            //         element.Left,
            //         element.Right
            //     ));
            // });
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
               "Minerals.AutoMixins.GenerateMixinAttribute",
               static (x, _) => x is TypeDeclarationSyntax,
               static (x, _) => new GenerateMixinObject(x)
            );

            var adds = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoMixins.AddMixinAttribute",
                static (x, _) => x is TypeDeclarationSyntax,
                static (x, _) => new AddMixinObject(x)
            );

            var combined = adds.Combine(generates.Collect());
            context.RegisterSourceOutput(combined, static (ctx, element) =>
            {
                string fileName = $"{element.Left.Name}.g.cs";
                ctx.AddSource(fileName, GeneratePartialClass(element.Left, element.Right));
            });
        }

        private static SourceText GeneratePartialClass(AddMixinObject addObj, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendUsings(builder, generateObjs);
            AppendNamespace(builder, addObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendPartialClass(builder, addObj);
            AppendMembers(builder, generateObjs);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendUsings(CodeBuilder builder, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            HashSet<string> usings = [];
            foreach (var obj in generateObjs)
            {
                foreach (var item in obj.Usings)
                {
                    usings.Add(item);
                }
                if (obj.Namespace != string.Empty)
                {
                    usings.Add(obj.Namespace);
                }
            }
            builder.WriteIteration(usings, (builder1, item, next) =>
            {
                builder1.WriteLine("using ").Write(item).Write(";");
            });
            builder.NewLine();
        }

        private static void AppendNamespace(CodeBuilder builder, AddMixinObject addObj)
        {
            if (addObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ").Write(addObj.Namespace).OpenBlock();
            }
        }

        private static void AppendPartialClass(CodeBuilder builder, AddMixinObject addObj)
        {
            builder.NewLine().WriteIteration(addObj.Modifiers, (builder, item, next) =>
            {
                builder.Write(item).Write(" ");
            });
            builder.Write("class ").Write(addObj.Name);
            if (addObj.Base != string.Empty)
            {
                builder.Write(" : ").Write(addObj.Base);
            }
            builder.OpenBlock();
        }

        private static void AppendMembers(CodeBuilder builder, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            foreach (var obj in generateObjs)
            {
                builder.WriteLine("// MixinType: ").Write(obj.Name);
                foreach (var member in obj.Members)
                {
                    builder.WriteLine(member);
                }
            }
        }

        public static SourceText BuildMixinPartialClassForTargetNode
        (
            GeneratorAttributeSyntaxContext add,
            ImmutableArray<GeneratorAttributeSyntaxContext> generates
        )
        {
            CodeBuilder builder = new();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());

            builder.AddUsingsFrom(generates.Add(add).Select(x => x.TargetNode));
            builder.AddNamespaceDeclarationHeader(add.TargetNode);
            builder.AddAutoGeneratedAttributes(add.TargetNode.GetType());

            builder.AddTypeDeclarationHeader(add.TargetNode);
            builder.OpenBlock();
            GeneratePartialClassBody(builder, generates);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void GeneratePartialClassBody
        (
            CodeBuilder builder,
            ImmutableArray<GeneratorAttributeSyntaxContext> generates
        )
        {
            foreach (var syntax in generates.Select(x => (TypeDeclarationSyntax)x.TargetNode))
            {
                builder.WriteLine("// MixinType: ").Write(syntax.Identifier.ValueText);
                foreach (var member in syntax.Members)
                {
                    builder.WriteLine(member.ToString());
                }
            }
        }
    }
}